# Item 1. 생성자 대신 정적 팩터리 메서드를 고려하라

## 장점
- 이름을 가질 수 있음
  - 생성자와 생성자의 매개변수만으로는 객체의 특성을 표현하기 어려운 경우가 있음
- 호출 시마다 인스턴스 생성하지 않아도 됨
- 반환 타입의 하위 타입 객체를 반환할 수 있음
  - 인터페이스를 정적 팩터리 메서드의 반환 타입으로 사용하는 방식임
  - 클라이언트는 내부 구현체가 무엇인지 모른체 인터페이스만으로 다룰 수 있음
- 입력 매개변수에 따라 다른 반환 값을 가질 수 있음
  - 입력 매개변수의 조건에 따라 반환 값을 다르게 할 수 있음
  - 다음 버전에서 구현체가 추가된다 해도 쉽게 추가 가능함 
  - 클라이언트는 어떤 구현체가 오는지 신경쓰지 않고 어떤 동작을 하는 지만 안 상태로 사용할 수 있음
- 정적 팩터리 메서드 작성 시점에 구현체가 없어도 됨
  - 위 장점들과 같은 이유로, 추상화되어있기 때문임
## 단점
- private 생성자만 있으므로 정적 팩터리 메서드만 사용하면 하위 클래스 사용 불가능함
- 정적 팩터리 메서드는 개발자가 찾기 어려움

## 내 생각 정리
- 생성자를 통해 객체를 표현하기 어려운 경우 이름을 가질 수 있는 정적 팩터리 메서드를 사용한다라는 점이 새로웠음
- 입력 조건에 따라 반환 타입이 달라지거나, 반환 타입의 하위 클래스가 추가될 여지가 많다면 사용하기 좋을 것 같음
  
